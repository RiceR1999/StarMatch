{"ast":null,"code":"var _jsxFileName = \"/home/ryan/WebApps/stars-game/src/StarMatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlayNumber = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: \"number\",\n  style: {\n    backgroundColor: colors[props.status]\n  },\n  onClick: () => props.onClick(props.number, props.status),\n  children: props.number\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 1\n}, this);\n\n_c = PlayNumber;\n\nconst Star = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"star\"\n}, props.starId, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 1\n}, this);\n\n_c2 = Star;\n\nconst StarsDisplay = props => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: utils.range(1, props.count).map(starId => /*#__PURE__*/_jsxDEV(Star, {}, starId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this))\n}, void 0, false);\n\n_c3 = StarsDisplay;\n\nconst PlayAgain = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-done\",\n  children: /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"play-again\",\n    onClick: props.onClick,\n    children: \"Play Again\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 6\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 3\n}, this);\n\n_c4 = PlayAgain;\n\nconst StarMatch = () => {\n  _s();\n\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n  React.useEffect(() => {\n    setTimeout(() => {\n      if (secondsLeft > 0) {\n        setSecondsLeft(secondsLeft - 1);\n      } else {}\n    }, 1000);\n    console.log('Done rendering');\n    return () => console.log('Component is changing');\n  });\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameIsDone = availableNums.length === 0;\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onButtonClick = () => {\n    setStars(utils.random(1, 9));\n    setAvailableNums(utils.range(1, 9));\n    setCandidateNums([]);\n  };\n\n  const onNumberClick = (number, status) => {\n    if (status === 'used') {\n      return;\n    }\n\n    const newCandidateNums = status === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(z => !newCandidateNums.includes(z));\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"help\",\n      children: \"Pick 1 or more numbers that sum to the number of stars\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left\",\n        children: gameIsDone ? /*#__PURE__*/_jsxDEV(PlayAgain, {\n          onClick: onButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(StarsDisplay, {\n          count: stars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right\",\n        children: utils.range(1, 9).map(number => /*#__PURE__*/_jsxDEV(PlayNumber, {\n          number: number,\n          status: numberStatus(number),\n          onClick: onNumberClick\n        }, number, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [\"Time Remaining:\", secondsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this);\n}; // Color Theme\n\n\n_s(StarMatch, \"nIfXa/Y0biW+4IUv2nC2k9fNeC8=\");\n\n_c5 = StarMatch;\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math \n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  //length of array from given input  //increment each element by min + i.. 0,1= 1 1,1=2 2,1=3, 3,1=4, 4,1=5...etc\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"PlayNumber\");\n$RefreshReg$(_c2, \"Star\");\n$RefreshReg$(_c3, \"StarsDisplay\");\n$RefreshReg$(_c4, \"PlayAgain\");\n$RefreshReg$(_c5, \"StarMatch\");","map":{"version":3,"sources":["/home/ryan/WebApps/stars-game/src/StarMatch.js"],"names":["React","useState","PlayNumber","props","backgroundColor","colors","status","onClick","number","Star","starId","StarsDisplay","utils","range","count","map","PlayAgain","StarMatch","stars","setStars","random","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","setTimeout","console","log","candidatesAreWrong","sum","gameIsDone","length","numberStatus","includes","onButtonClick","onNumberClick","newCandidateNums","concat","filter","cn","newAvailableNums","z","randomSumIn","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst PlayNumber = props => (\n<button className='number'\n style={{backgroundColor: colors[props.status]}}\n onClick={() => props.onClick(props.number, props.status)}\n >{props.number}</button>\n);\n\nconst Star = props => (\n<div key={props.starId} className=\"star\"/>\n);\n\nconst StarsDisplay = props => (\n<>\n{utils.range(1,props.count).map(starId =>\n    <Star key={starId}/>)\n }\n</>\n);\n\nconst PlayAgain = props => (\n  <div className='game-done'> \n     <button className='play-again'\n     onClick={props.onClick}>Play Again</button>\n  </div>\n);  \n\n\n\nconst StarMatch = () => {\n    const [stars, setStars] = useState(utils.random(1,9));\n    const [availableNums, setAvailableNums] = useState(utils.range(1,9));\n    const [candidateNums, setCandidateNums] = useState([]);\n    const [secondsLeft, setSecondsLeft] = useState(10);\n\n    React.useEffect(() => {\n      setTimeout(() => {\n        if(secondsLeft > 0){\n          setSecondsLeft(secondsLeft - 1);\n        }\n        else{\n\n        }\n      }, 1000 );\n      console.log('Done rendering');\n      return () => console.log('Component is changing');\n    });\n\n    const candidatesAreWrong = utils.sum(candidateNums) > stars; \n    const gameIsDone = availableNums.length === 0;\n\n    const numberStatus= (number) => {\n        if(!availableNums.includes(number)){\n            return 'used';\n        }\n        if(candidateNums.includes(number)){\n           return candidatesAreWrong ? 'wrong' : 'candidate';\n        }\n        return 'available';\n    }\n    const onButtonClick = () => {\n      setStars(utils.random(1,9));\n      setAvailableNums(utils.range(1,9));\n      setCandidateNums([]);\n    }\n\n    const onNumberClick = (number, status) => {\n       if(status === 'used'){\n           return;\n       }\n       \n       const newCandidateNums =\n       status === 'available'\n       ? candidateNums.concat(number)\n       : candidateNums.filter(cn => cn !== number);\n       \n       if (utils.sum(newCandidateNums) !== stars){\n           setCandidateNums(newCandidateNums);\n       } else {\n           const newAvailableNums = availableNums.filter( z =>\n            !newCandidateNums.includes(z)\n           );\n        setStars(utils.randomSumIn(newAvailableNums,9));\n        setAvailableNums(newAvailableNums);\n        setCandidateNums([]);\n       }\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"help\">\n          Pick 1 or more numbers that sum to the number of stars\n        </div>\n        <div className=\"body\">\n          <div className=\"left\">\n            { gameIsDone ? (<PlayAgain \n             onClick={onButtonClick}/>) :\n              (<StarsDisplay count={stars}/>)\n            }\n          </div>\n          <div className=\"right\">\n              {utils.range(1,9).map(number => \n              <PlayNumber \n               key={number}\n               number={number}\n               status={numberStatus(number)} \n               onClick={onNumberClick}/>\n               )}\n          </div>\n        </div>\n        <div className=\"timer\">Time Remaining: \n        {secondsLeft}</div>\n      </div>\n    );\n  };\n\n  // Color Theme\nconst colors = {\n    available: 'lightgray',\n    used: 'lightgreen',\n    wrong: 'lightcoral',\n    candidate: 'deepskyblue',\n  };\n  \n  // Math \n  const utils = {\n    // Sum an array\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  \n    // create an array of numbers between min and max (edges included)\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n                                    //length of array from given input  //increment each element by min + i.. 0,1= 1 1,1=2 2,1=3, 3,1=4, 4,1=5...etc\n    // pick a random number between min and max (edges included)\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  \n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr, max) => {\n      const sets = [[]];\n      const sums = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0, len = sets.length; j < len; j++) {\n          const candidateSet = sets[j].concat(arr[i]);\n          const candidateSum = utils.sum(candidateSet);\n          if (candidateSum <= max) {\n            sets.push(candidateSet);\n            sums.push(candidateSum);\n          }\n        }\n      }\n      return sums[utils.random(0, sums.length - 1)];\n    },\n  };\n\n  export default StarMatch;"]},"metadata":{},"sourceType":"module"}