{"ast":null,"code":"var _jsxFileName = \"/home/ryan/WebApps/stars-game/src/StarMatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Number = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: \"number\",\n  children: props.number\n}, props.number, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 1\n}, this);\n\n_c = Number;\n\nconst Star = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"star\"\n}, props.starId, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 1\n}, this);\n\n_c2 = Star;\n\nconst StarMatch = () => {\n  _s();\n\n  const [stars, setStars] = useState(utils.random(1, 9));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"help\",\n      children: \"Pick 1 or more numbers that sum to the number of stars\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left\",\n        children: utils.range(1, stars).map(starId => /*#__PURE__*/_jsxDEV(Star, {}, starId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right\",\n        children: utils.range(1, 9).map(number => /*#__PURE__*/_jsxDEV(Number, {\n          number: number\n        }, numberId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: \"Time Remaining: 10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }, this);\n}; // Color Theme\n\n\n_s(StarMatch, \"VEY+b8bdewH/JQ0YeYGZ72dIfnk=\");\n\n_c3 = StarMatch;\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  //length of array from given input  //increment each element by min + i.. 0,1= 1 1,1=2 2,1=3, 3,1=4, 4,1=5...etc\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Number\");\n$RefreshReg$(_c2, \"Star\");\n$RefreshReg$(_c3, \"StarMatch\");","map":{"version":3,"sources":["/home/ryan/WebApps/stars-game/src/StarMatch.js"],"names":["React","useState","Number","props","number","Star","starId","StarMatch","stars","setStars","utils","random","range","map","numberId","colors","available","used","wrong","candidate","sum","arr","reduce","acc","curr","min","max","Array","from","length","_","i","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst Number = props => (\n<button key={props.number} className='number'>{props.number}</button>\n);\n\nconst Star = props => (\n<div key={props.starId} className=\"star\"/>\n);\n\nconst StarMatch = () => {\n    const [stars, setStars] = useState(utils.random(1,9));\n    return (\n      <div className=\"game\">\n        <div className=\"help\">\n          Pick 1 or more numbers that sum to the number of stars\n        </div>\n        <div className=\"body\">\n          <div className=\"left\">\n              {utils.range(1,stars).map(starId =>\n                <Star key={starId} />\n              )}\n          </div>\n          <div className=\"right\">\n              {utils.range(1,9).map(number => \n              <Number key={numberId} number={number} />\n               )}\n          </div>\n        </div>\n        <div className=\"timer\">Time Remaining: 10</div>\n      </div>\n    );\n  };\n\n  // Color Theme\nconst colors = {\n    available: 'lightgray',\n    used: 'lightgreen',\n    wrong: 'lightcoral',\n    candidate: 'deepskyblue',\n  };\n  \n  // Math science\n  const utils = {\n    // Sum an array\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  \n    // create an array of numbers between min and max (edges included)\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n                                    //length of array from given input  //increment each element by min + i.. 0,1= 1 1,1=2 2,1=3, 3,1=4, 4,1=5...etc\n    // pick a random number between min and max (edges included)\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  \n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr, max) => {\n      const sets = [[]];\n      const sums = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0, len = sets.length; j < len; j++) {\n          const candidateSet = sets[j].concat(arr[i]);\n          const candidateSum = utils.sum(candidateSet);\n          if (candidateSum <= max) {\n            sets.push(candidateSet);\n            sums.push(candidateSum);\n          }\n        }\n      }\n      return sums[utils.random(0, sums.length - 1)];\n    },\n  };\n\n  export default StarMatch;"]},"metadata":{},"sourceType":"module"}